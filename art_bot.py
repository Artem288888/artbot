import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging
import telebot
import time
import os

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger()

BOT_TOKEN = '7650951016:AAE1sBUl6Lq-Y9xwbjyyoDlcPhQsWyYpnR4'
CHAT_ID = '6854620915'

bot = telebot.TeleBot(BOT_TOKEN)

SEEN_FILE = 'seen_plates.txt'

def load_seen_plates():
    if not os.path.exists(SEEN_FILE):
        logger.info("–§–∞–π–ª –∑ —Ä–∞–Ω—ñ—à–µ –ø–æ–±–∞—á–µ–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.")
        return set()
    with open(SEEN_FILE, 'r', encoding='utf-8') as f:
        plates = set(line.strip() for line in f if line.strip())
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(plates)} –Ω–æ–º–µ—Ä—ñ–≤ –∑ —Ñ–∞–π–ª—É.")
        return plates

def save_seen_plates(plates):
    with open(SEEN_FILE, 'a', encoding='utf-8') as f:
        for plate in plates:
            f.write(plate + '\n')
    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(plates)} –Ω–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ —É —Ñ–∞–π–ª.")

seen_plates = load_seen_plates()

def is_interesting_plate(plate):
    plate_str = plate.replace(" ", "").upper()
    zeros = plate_str.count("0")
    sevens = plate_str.count("7")
    return (
        zeros >= 2 or
        sevens >= 2 or
        "0707" in plate_str or
        "7707" in plate_str
    )

def fetch_plates_with_selenium():
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    driver = webdriver.Chrome(options=options)
    url = "https://opendata.hsc.gov.ua/check-leisure-license-plates/?region=–õ—å–≤—ñ–≤—Å—å–∫–∞&tsc=–í–µ—Å—å+—Ä–µ–≥—ñ–æ–Ω&type_venichle=light_car_and_truck"
    driver.get(url)

    all_plates = set()
    wait = WebDriverWait(driver, 10)

    while True:
        try:
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "table tbody tr")))

            rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
            if not rows:
                logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ.")
                break

            for row in rows:
                cols = row.find_elements(By.TAG_NAME, "td")
                if cols:
                    plate = cols[0].text.strip()
                    all_plates.add(plate)

            # --- –û–ù–û–í–õ–ï–ù–ò–ô –ë–õ–û–ö –ü–ê–ì–Ü–ù–ê–¶–Ü–á ---
            next_button = None
            buttons = driver.find_elements(By.CSS_SELECTOR, "a.paginate_button.next")
            for b in buttons:
                logger.info(f"–ö–Ω–æ–ø–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó: —Ç–µ–∫—Å—Ç='{b.text}', id='{b.get_attribute('id')}', –∫–ª–∞—Å='{b.get_attribute('class')}'")
                if b.text.strip() == "–ù–∞—Å—Ç—É–ø–Ω–∞":
                    next_button = b
                    break

            if not next_button:
                logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—É–ø–Ω–∞' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (–ø–æ –∫–ª–∞—Å—É —ñ —Ç–µ–∫—Å—Ç—É), –∑–∞–≤–µ—Ä—à—É—î–º–æ.")
                break

            classes = next_button.get_attribute("class")
            if "disabled" in classes:
                logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—É–ø–Ω–∞' –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ ‚Äî –∫—ñ–Ω–µ—Ü—å –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.")
                break

            logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.")
            next_button.click()

            wait.until(EC.staleness_of(rows[0]))
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "table tbody tr")))

            time.sleep(1)

        except TimeoutException:
            logger.info("–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó, –∑–∞–≤–µ—Ä—à—É—î–º–æ.")
            break
        except NoSuchElementException as e:
            logger.info(f"–ö–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—É–ø–Ω–∞' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏, –∑–∞–≤–µ—Ä—à—É—î–º–æ. {e}")
            break
        except Exception as e:
            logger.error(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            break

    driver.quit()
    return list(all_plates)

def check_site():
    logger.info("–ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∞–π—Ç—É...")

    plates = fetch_plates_with_selenium()
    if not plates:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–º–µ—Ä–∏.")
        return

    new_matches = []
    for plate in plates:
        if plate not in seen_plates and is_interesting_plate(plate):
            seen_plates.add(plate)
            new_matches.append(plate)

    if new_matches:
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_matches)} –Ω–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤: {new_matches}")
        for plate in new_matches:
            try:
                bot.send_message(CHAT_ID, f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–∫–∞–≤–∏–π –Ω–æ–º–µ—Ä: {plate}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
        save_seen_plates(new_matches)
    else:
        logger.info("–ù–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        bot.send_message(CHAT_ID, "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ß–µ–∫–∞—î–º–æ 5 —Ö–≤ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def background_checker():
    try:
        bot.send_message(CHAT_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–º–µ—Ä—ñ–≤.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∞–π—Ç—É (—Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫).")
            check_site()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—ñ: {e}")
        logger.info("–ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
        time.sleep(300)

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_web_server():
    port = int(os.getenv("PORT", "10000"))
    logger.info(f"–ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    server = HTTPServer(('0.0.0.0', port), Handler)
    server.serve_forever()

if __name__ == "__main__":
    web_thread = threading.Thread(target=run_web_server)
    web_thread.daemon = True
    web_thread.start()

    background_checker()
