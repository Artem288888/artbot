import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging
import requests
from bs4 import BeautifulSoup
import telebot
import time
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger()

BOT_TOKEN = '7650951016:AAE1sBUl6Lq-Y9xwbjyyoDlcPhQsWyYpnR4'
CHAT_ID = '6854620915'

bot = telebot.TeleBot(BOT_TOKEN)

SEEN_FILE = 'seen_plates.txt'

def load_seen_plates():
    if not os.path.exists(SEEN_FILE):
        logger.info("–§–∞–π–ª –∑ —Ä–∞–Ω—ñ—à–µ –ø–æ–±–∞—á–µ–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.")
        return set()
    with open(SEEN_FILE, 'r', encoding='utf-8') as f:
        plates = set(line.strip() for line in f if line.strip())
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(plates)} –Ω–æ–º–µ—Ä—ñ–≤ –∑ —Ñ–∞–π–ª—É.")
        return plates

def save_seen_plates(plates):
    with open(SEEN_FILE, 'a', encoding='utf-8') as f:
        for plate in plates:
            f.write(plate + '\n')
    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(plates)} –Ω–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ —É —Ñ–∞–π–ª.")

seen_plates = load_seen_plates()

def is_interesting_plate(plate):
    plate_str = plate.replace(" ", "").upper()
    zeros = plate_str.count("0")
    sevens = plate_str.count("7")
    return (
        zeros >= 2 or
        sevens >= 2 or
        "0707" in plate_str or
        "7707" in plate_str
    )

def fetch_plates_page(page=1):
    url = "https://opendata.hsc.gov.ua/check-leisure-license-plates/"
    params = {
        "region": "–õ—å–≤—ñ–≤—Å—å–∫–∞",
        "tsc": "–í–µ—Å—å —Ä–µ–≥—ñ–æ–Ω",
        "type_venichle": "light_car_and_truck",
        "page": page
    }
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    try:
        r = requests.get(url, params=params, headers=headers, timeout=15)
        r.raise_for_status()
        return r.text
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page}: {e}")
        return None

def parse_plates(html):
    soup = BeautifulSoup(html, 'html.parser')
    table = soup.find("table")
    if not table:
        logger.warning("–¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ!")
        return []

    plates = []
    rows = table.tbody.find_all("tr") if table.tbody else table.find_all("tr")
    for row in rows:
        cols = row.find_all("td")
        if cols and len(cols) > 0:
            plate = cols[0].text.strip()
            plates.append(plate)
    return plates

def check_site():
    logger.info("–ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∞–π—Ç—É...")
    page = 1
    new_found = []

    while True:
        html = fetch_plates_page(page)
        if not html:
            break

        plates = parse_plates(html)
        if not plates:
            logger.info(f"–ù–µ–º–∞—î –Ω–æ–º–µ—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}, –∑–∞–≤–µ—Ä—à—É—î–º–æ.")
            break

        new_matches = []
        for plate in plates:
            if plate not in seen_plates and is_interesting_plate(plate):
                seen_plates.add(plate)
                new_matches.append(plate)

        if new_matches:
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_matches)} –Ω–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}: {new_matches}")
            for plate in new_matches:
                try:
                    bot.send_message(CHAT_ID, f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–∫–∞–≤–∏–π –Ω–æ–º–µ—Ä: {plate}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
            save_seen_plates(new_matches)
            new_found.extend(new_matches)
        else:
            logger.info(f"–ù–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}.")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–∞"
        soup = BeautifulSoup(html, 'html.parser')
        next_button = soup.find('a', string="–ù–∞—Å—Ç—É–ø–Ω–∞")

        if not next_button:
            logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—É–ø–Ω–∞' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
            break

        button_classes = next_button.get('class', [])
        if 'disabled' in button_classes:
            logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—É–ø–Ω–∞' –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞, –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
            break

        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É: {page + 1}")
        page += 1
        time.sleep(2)

    if new_found:
        logger.info(f"–ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ {len(new_found)} –Ω–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤.")
    else:
        logger.info("–ù–µ–º–∞ –Ω–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∑–∞ —Ü—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")

    try:
        bot.send_message(CHAT_ID, "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ß–µ–∫–∞—î–º–æ 5 —Ö–≤ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def background_checker():
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∞–π—Ç—É (—Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫).")
            check_site()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—ñ: {e}")
        logger.info("–ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
        time.sleep(300)

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_web_server():
    port = int(os.getenv("PORT", "10000"))
    logger.info(f"–ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    server = HTTPServer(('0.0.0.0', port), Handler)
    server.serve_forever()

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –Ω–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤...")

    try:
        bot.send_message(CHAT_ID, "üîß –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞!")
        logger.info("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∞–π—Ç—É —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    checker_thread = threading.Thread(target=background_checker, daemon=True)
    checker_thread.start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Å–µ—Ä–≤–µ—Ä —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    run_web_server()
