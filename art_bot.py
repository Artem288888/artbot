import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import telebot
import time
import os
from webdriver_manager.chrome import ChromeDriverManager  # <-- –¥–æ–¥–∞–Ω–æ

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger()

# --- –§–µ–π–∫–æ–≤–∏–π –≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
def run_fake_web_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"Bot is running.")

        def do_HEAD(self):
            self.send_response(200)
            self.end_headers()

    port = int(os.getenv("PORT", "10000"))
    logger.info(f"–ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    server = HTTPServer(('0.0.0.0', port), Handler)
    server.serve_forever()

threading.Thread(target=run_fake_web_server, daemon=True).start()

# --- –¢–≤–æ—ó –¥–∞–Ω—ñ ---
BOT_TOKEN = '7650951016:AAE1sBUl6Lq-Y9xwbjyyoDlcPhQsWyYpnR4'
CHAT_ID = '6854620915'

bot = telebot.TeleBot(BOT_TOKEN)

SEEN_FILE = 'seen_plates.txt'

def load_seen_plates():
    if not os.path.exists(SEEN_FILE):
        logger.info("–§–∞–π–ª –∑ —Ä–∞–Ω—ñ—à–µ –ø–æ–±–∞—á–µ–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.")
        return set()
    with open(SEEN_FILE, 'r', encoding='utf-8') as f:
        plates = set(line.strip() for line in f if line.strip())
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(plates)} –Ω–æ–º–µ—Ä—ñ–≤ –∑ —Ñ–∞–π–ª—É.")
        return plates

def save_seen_plates(plates):
    with open(SEEN_FILE, 'a', encoding='utf-8') as f:
        for plate in plates:
            f.write(plate + '\n')
    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(plates)} –Ω–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ —É —Ñ–∞–π–ª.")

seen_plates = load_seen_plates()

def is_interesting_plate(plate):
    plate_str = plate.replace(" ", "").upper()
    zeros = plate_str.count("0")
    sevens = plate_str.count("7")
    return (
        zeros >= 2 or
        sevens >= 2 or
        "0707" in plate_str or
        "7707" in plate_str
    )

def check_site():
    logger.info("–ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∞–π—Ç—É...")
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    # –û—Å—å —Ç—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ webdriver_manager
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        url = "https://opendata.hsc.gov.ua/check-leisure-license-plates/"
        driver.get(url)
        logger.info("–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")

        WebDriverWait(driver, 40).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'select[name="region"]'))
        )
        oblast_select = driver.find_element(By.CSS_SELECTOR, 'select[name="region"]')
        for option in oblast_select.find_elements(By.TAG_NAME, "option"):
            if option.text.strip() == "–õ—å–≤—ñ–≤—Å—å–∫–∞":
                option.click()
                logger.info("–í–∏–±—Ä–∞–Ω–æ —Ä–µ–≥—ñ–æ–Ω –õ—å–≤—ñ–≤—Å—å–∫–∞.")
                break
        time.sleep(1)

        tsc_select = driver.find_element(By.CSS_SELECTOR, 'select[name="tsc"]')
        for option in tsc_select.find_elements(By.TAG_NAME, "option"):
            if option.text.strip() == "–í–µ—Å—å —Ä–µ–≥—ñ–æ–Ω":
                option.click()
                logger.info("–í–∏–±—Ä–∞–Ω–æ '–í–µ—Å—å —Ä–µ–≥—ñ–æ–Ω'.")
                break
        time.sleep(1)

        type_select = driver.find_element(By.CSS_SELECTOR, 'select[name="type_venichle"]')
        for option in type_select.find_elements(By.TAG_NAME, "option"):
            if option.get_attribute("value") == "light_car_and_truck":
                option.click()
                logger.info("–í–∏–±—Ä–∞–Ω–æ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É '–ª–µ–≥–∫–æ–≤—ñ –∞–≤—Ç–æ —ñ –≤–∞–Ω—Ç–∞–∂—ñ–≤–∫–∏'.")
                break
        time.sleep(1)

        view_button = driver.find_element(By.XPATH, '//input[@type="submit" and @value="–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò"]')
        view_button.click()
        logger.info("–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò.")
        time.sleep(3)

        while True:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table tbody tr"))
            )
            rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")

            new_matches = []

            for row in rows:
                cols = row.find_elements(By.TAG_NAME, "td")
                if not cols:
                    continue
                plate = cols[0].text.strip()

                if plate not in seen_plates and is_interesting_plate(plate):
                    seen_plates.add(plate)
                    new_matches.append(plate)

            if new_matches:
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_matches)} –Ω–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤: {new_matches}")
                for plate in new_matches:
                    try:
                        bot.send_message(CHAT_ID, f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–∫–∞–≤–∏–π –Ω–æ–º–µ—Ä: {plate}")
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
                save_seen_plates(new_matches)
            else:
                logger.info("–ù–æ–≤–∏—Ö —Ü—ñ–∫–∞–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.")

            try:
                next_button = driver.find_element(By.XPATH, '//a[contains(text(), "–ù–∞—Å—Ç—É–ø–Ω–∞")]')
                classes = next_button.get_attribute("class")
                if 'disabled' in classes:
                    logger.info("–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
                    break
                else:
                    next_button.click()
                    logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    time.sleep(3)
            except Exception as e:
                logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—É–ø–Ω–∞' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –ø–æ–º–∏–ª–∫–∞: {e}, –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
                break

    except Exception as e:
        logger.error(f"üî¥ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≤ check_site: {e}")
    finally:
        try:
            bot.send_message(CHAT_ID, "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ß–µ–∫–∞—î–º–æ 5 —Ö–≤ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        driver.quit()

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –Ω–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤...")

    try:
        bot.send_message(CHAT_ID, "üîß –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞!")
        logger.info("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∞–π—Ç—É.")
            check_site()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
        logger.info("–ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
        time.sleep(300)
